name: WNBA Sheets-only Props + Roles (Role-Aware Projections)

on:
  schedule:
    - cron: '22 13 * * *'  # ~9:22am ET (cron is UTC)
  workflow_dispatch:

jobs:
  sheets_roles_props:
    runs-on: ubuntu-latest
    timeout-minutes: 35
    env:
      PYTHONPATH: ${{ github.workspace }}  # ensure ./src is importable

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt missing; installing defaults"
            pip install pandas numpy matplotlib pillow gspread google-auth gspread_dataframe scipy scikit-learn joblib
          fi

      - name: Load Google credentials (env only)
        env:
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        run: |
          python - <<'PY'
          import os, json
          raw = os.environ.get("GOOGLE_SERVICE_ACCOUNT_JSON","").strip()
          assert raw, "GOOGLE_SERVICE_ACCOUNT_JSON is empty"
          json.loads(raw)
          print("OK: env JSON valid")
          PY

      - name: Create role_multipliers template if missing
        run: |
          if [ ! -f role_multipliers_template.csv ]; then
            printf '%s\n' \
              'role_type,role_name,points,rebounds,assists,threes,steals,ftm' \
              'OFF,Shooter,0.05,0.00,0.00,0.15,0.00,0.00' \
              'OFF,Driver/Slasher,0.08,0.00,0.00,-0.05,0.00,0.12' \
              'OFF,Facilitator,-0.05,0.00,0.15,0.00,0.00,0.00' \
              'OFF,Primary Scorer,0.12,0.00,0.00,0.06,0.00,0.08' \
              'OFF,Combo Guard,0.04,0.00,0.08,0.08,0.00,0.00' \
              'OFF,Balanced Wing,0.02,0.02,0.02,0.00,0.00,0.00' \
              'DEF,Rim Protector,0.00,0.10,0.00,0.00,0.00,0.00' \
              'DEF,Boarding Big,0.00,0.12,0.00,0.00,0.00,0.00' \
              'DEF,Point of Attack,0.00,0.00,0.00,0.00,0.15,0.00' \
              'DEF,Team Defender,0.00,0.01,0.00,0.00,0.02,0.00' \
              > role_multipliers_template.csv
            echo "Template created"
          else
            echo "Template already present"
          fi

      - name: Ensure role_multipliers tab (retry)
        env:
          SHEET_ID: ${{ secrets.SHEET_ID }}
          ROLE_MULT_TEMPLATE: role_multipliers_template.csv
          SHEET_TAB_ROLE_MULT: role_multipliers
          FORCE_ROLE_MULTIPLIERS: '0'
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
          GSHEET_RETRY_ATTEMPTS: '6'
          GSHEET_RETRY_BASE: '2.0'
        run: |
          for i in 1 2 3; do
            python ensure_role_multipliers_tab.py && break || {
              echo "Attempt $i failed; sleeping $((10*i))s"; sleep $((10*i));
            }
          done

      - name: Build context from Sheets
        env:
          SHEET_ID: ${{ secrets.SHEET_ID }}
          OUTPUT_DIR: ./out
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        run: python sheets_only_runner.py

      - name: Create player_game_log template if missing
        run: |
          if [ ! -f player_game_log_template.csv ]; then
            printf '%s\n' \
              'date,player,team,min,pts,reb,ast,stl,blk,tov,fga,fg3a,fta' \
              '2025-05-10,Sample Player,LV Aces,30,18,7,4,1,1,2,14,6,4' \
              '2025-05-12,Sample Player,LV Aces,28,21,6,5,0,0,3,15,7,5' \
              > player_game_log_template.csv
            echo "Template created"
          else
            echo "Template already present"
          fi

      - name: Ensure player_game_log tab (retry)
        env:
          SHEET_ID: ${{ secrets.SHEET_ID }}
          LOG_TEMPLATE: player_game_log_template.csv
          SHEET_TAB_LOGS: player_game_log
          FORCE_LOGS: '0'
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
          GSHEET_RETRY_ATTEMPTS: '6'
          GSHEET_RETRY_BASE: '2.0'
        run: |
          for i in 1 2 3; do
            python ensure_player_game_log_tab.py && break || {
              echo "Attempt $i failed; sleeping $((10*i))s"; sleep $((10*i));
            }
          done

      - name: Fit role models
        env:
          SHEET_ID: ${{ secrets.SHEET_ID }}
          OUTPUT_DIR: ./out
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        run: python scripts/fit_roles.py

      - name: Infer player roles today
        env:
          SHEET_ID: ${{ secrets.SHEET_ID }}
          OUTPUT_DIR: ./out
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        run: python scripts/infer_roles_today.py

      - name: Push roles to Sheet
        env:
          SHEET_ID: ${{ secrets.SHEET_ID }}
          OUTPUT_DIR: ./out
          SHEET_TAB_ROLES: player_roles_today
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        run: python push_roles_to_gsheets.py

      - name: Run role-aware prop model
        env:
          SHEET_ID: ${{ secrets.SHEET_ID }}
          OUTPUT_DIR: ./out
          SHEET_TAB_ROLES: player_roles_today
          SHEET_TAB_ROLE_MULT: role_multipliers
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        run: python props_model.py
        
      - name: Ensure 
        env:
          OUTPUT_DIR: ./out
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, glob, pandas as pd, sys, shutil, pathlib
          out = os.environ.get("OUTPUT_DIR","./out")
          pathlib.Path(out).mkdir(parents=True, exist_ok=True)
          target = os.path.join(out, "player_prop_projections.csv")

          # If exists and non-empty, done
          if os.path.exists(target) and os.path.getsize(target) > 0:
              print("Found", target, "size:", os.path.getsize(target))
              sys.exit(0)

          # Try to find a projections-like CSV
          patterns = ["*projection*.csv","*proj*.csv","*prop*.csv","*player_prop*.csv"]
          cands = []
          for p in patterns:
              cands += glob.glob(os.path.join(out, p))
          cands = sorted(set(cands))
          for c in cands:
              try:
                  df = pd.read_csv(c)
              except Exception:
                  continue
              if {"player","team"}.issubset({col.lower() for col in df.columns}):
                  shutil.copy(c, target)
                  print("Copied", c, "->", target)
                  print("Prepared", target, "size:", os.path.getsize(target))
                  sys.exit(0)

          # Try XLSX -> CSV
          xpatterns = ["*projection*.xlsx","*proj*.xlsx","*prop*.xlsx","*player_prop*.xlsx"]
          xcands = []
          for p in xpatterns:
              xcands += glob.glob(os.path.join(out, p))
          xcands = sorted(set(xcands))
          for x in xcands:
              try:
                  df = pd.read_excel(x)
              except Exception:
                  continue
              if {"player","team"}.issubset({col.lower() for col in df.columns}):
                  df.to_csv(target, index=False)
                  print("Converted", x, "->", target)
                  print("Prepared", target, "rows:", len(df))
                  sys.exit(0)

          # Create empty with headers as fallback
          cols = [
              "player_id","player","team","opponent","date",
              "minutes_mu","minutes_sd","usage",
              "pts_mu","pts_sd","reb_mu","reb_sd","ast_mu","ast_sd","threes_mu","threes_sd",
              "pts_line","reb_line","ast_line","threes_line",
              "role_offense","role_defense","source"
          ]
          pd.DataFrame(columns=cols).to_csv(target, index=False)
          print("Created empty projections with headers at", target)
          sys.exit(0)
          PY

      - name: Push projections to Sheet
        env:
          SHEET_ID: ${{ secrets.SHEET_ID }}
          OUTPUT_DIR: ./out
          SHEET_TAB_PROJECTIONS: player_prop_projections
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        run: python push_wnba_to_gsheets_v4.py
